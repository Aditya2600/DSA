#include<vector>
#include<iostream>
using namespace std;
const int MAX = 1000002;
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n,m;
    cin>>n>>m;
    vector<int> diff(MAX, 0);
    while(m--){
        int l, r;
        cin>>l>>r;
        diff[l]++;
        diff[r+1]--;
    }
    vector<int> coins(n+1, 0);
    for(int i=1; i<=n; i++){
        coins[i] = diff[i] + coins[i-1];
    }
    vector<int> count(MAX, 0);
    int maxCoins = 0;
    for(int i=1; i<=n; i++){
        count[coins[i]]++;
        maxCoins = max(maxCoins, coins[i]);
    }
    vector<int> atleast(MAX, 0);
    for(int i = maxCoins; i>=1; i--){
        atleast[i] = atleast[i+1] + count[i];
    }
    int q;
    cin >> q;
    while (q--) {
        int x;
        cin >> x;
        if (x >= MAX) cout << "0\n";
        else cout << atleast[x] << "\n";
    }
    // int n;
    // cin>>n;
    // vector<int> f(n+1,0);
    // int m;
    // cin>>m;
    // vector<int> l(n+1, 0);
    // vector<int> r(n+1, 0);
    // for(int i=0; i<m; i++){
    //     int L,R;
    //     cin>>L>>R;
    //     l[L]++;
    //     r[R]++;
    // }
    // f[1] = l[1];
    // for(int i = 2; i<=n; i++){
    //     f[i] = f[i-1] + l[i] - r[i-1];
    // }
    // vector<int> c(10000005, 0);
    // for(int i = 0; i <= n; i++){
    //     int coins = f[i];
    //     c[coins]++;
    // }
    // for(int i = c.size()-2; i>=0; i--){
    //     c[i] = c[i] + c[i+1];
    // }
    // int q;
    // cin>>q;
    // while(q--){
    //     int num;
    //     cin>>num;
    //     cout<<c[num]<<"\n";
    // }
    // return 0;
}
