#include <bits/stdc++.h>
using namespace std;
#define ll long long
const ll mod = 1e9 + 7;

vector<ll> fact, invFact;

ll modExp(ll a, ll b, ll m){
    ll ans = 1;
    a %= m;
    while(b){
        if(b & 1) ans = (ans * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return ans;
}

void precompute(int n){
    fact.resize(n+1, 1);
    for(int i = 2; i <= n; i++){
        fact[i] = (fact[i-1] * i) % mod;
    }
    invFact.resize(n+1, 1);
    invFact[n] = modExp(fact[n], mod - 2, mod);
    for(int i = n - 1; i >= 0; i--){
        invFact[i] = (invFact[i+1] * (i + 1)) % mod;
    }
}

ll ncr(int n, int r){
    if(r < 0 || r > n) return 0;
    return (((fact[n] * invFact[r]) % mod) * invFact[n - r]) % mod;
}

void solve(){
    int t;
    cin >> t;
    const int MAXN = 2e5; // enough since max steps = (n-1)+(m-1) â‰¤ 2e5
    precompute(MAXN);

    while(t--){
        int n, m, k;
        cin >> n >> m >> k;
        vector<int> x(k), y(k), p(k);

        for(int i = 0; i < k; i++){
            cin >> x[i] >> y[i] >> p[i];
        }

        ll total_strength = 0;
        for(int i = 0; i < k; i++){
            ll ways_start = ncr(x[i] + y[i] - 2, x[i] - 1);                // paths from (1,1) to (x[i],y[i])
            ll ways_end = ncr((n - x[i]) + (m - y[i]), n - x[i]);          // paths from (x[i],y[i]) to (n,m)
            ll total_paths = (ways_start * ways_end) % mod;
            total_strength = (total_strength + (total_paths * p[i]) % mod) % mod;
        }

        cout << total_strength << endl;
    }
}

int main(){
    solve();
    return 0;
}
